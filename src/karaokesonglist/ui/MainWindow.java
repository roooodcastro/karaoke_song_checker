package karaokesonglist.ui;

import java.util.ArrayList;
import java.util.List;
import javax.swing.DefaultRowSorter;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import karaokesonglist.Main;
import karaokesonglist.models.Song;
import karaokesonglist.models.SongRepository;

/**
 *
 * @author rodcastro
 */
public class MainWindow extends javax.swing.JFrame {

    private SplashWindow splash;
    private DefaultTableModel modelSongs;
    private DefaultTableModel modelInvalidSongs;

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        initComponents();
        splash = new SplashWindow();
        splash.setVisible(true);
        this.setSize(1000, 700);
        this.setLocationRelativeTo(null);
        createTableModels();
        tableSongs.setAutoCreateRowSorter(true);
    }

    public void loadSongs() {
        splash.loadSongs();
        splash.dispose();
        searchSongs("");
        DefaultRowSorter sorter = ((DefaultRowSorter) tableSongs.getRowSorter());
        ArrayList list = new ArrayList();
        list.add(new RowSorter.SortKey(1, SortOrder.ASCENDING));
        sorter.setSortKeys(list);
    }

    public void searchSongs(String search) {
        btnSearch.setEnabled(false);
        txtSearch.setEditable(false);
        List sortOrder = ((DefaultRowSorter) tableSongs.getRowSorter()).getSortKeys();
        SongRepository repository = Main.getRepository();
        String[][] filteredSongs = repository.findSongs(search);
        modelSongs.setDataVector(filteredSongs, new String[]{"Pack", "Artista", "Música", "Unique Id"});
        tableSongs.setAutoCreateRowSorter(true);
        tableSongs.setModel(modelSongs);
        tableSongs.getColumnModel().removeColumn(tableSongs.getColumnModel().getColumn(3));
        DefaultRowSorter sorter = ((DefaultRowSorter) tableSongs.getRowSorter());
        sorter.setSortKeys(sortOrder);
        btnSearch.setEnabled(true);
        txtSearch.setEditable(true);
    }

    private void createTableModels() {
        modelSongs = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        modelInvalidSongs = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        pnSideBar = new javax.swing.JPanel();
        btnShowInvalidSongs = new javax.swing.JButton();
        btnShowSongs = new javax.swing.JButton();
        pnTable = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableSongs = new javax.swing.JTable();
        btnEditArtist = new javax.swing.JButton();
        btnEditName = new javax.swing.JButton();
        btnSwitchNames = new javax.swing.JButton();
        pnSearch = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sunfly Karaoke Song List");

        pnSideBar.setBorder(javax.swing.BorderFactory.createTitledBorder(""));
        pnSideBar.setMaximumSize(new java.awt.Dimension(300, 32767));
        pnSideBar.setMinimumSize(new java.awt.Dimension(200, 100));
        pnSideBar.setPreferredSize(new java.awt.Dimension(200, 500));

        btnShowInvalidSongs.setText("Exibir músicas inválidas");
        btnShowInvalidSongs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowInvalidSongsActionPerformed(evt);
            }
        });

        btnShowSongs.setText("Exibir músicas");
        btnShowSongs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShowSongsActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnSideBarLayout = new javax.swing.GroupLayout(pnSideBar);
        pnSideBar.setLayout(pnSideBarLayout);
        pnSideBarLayout.setHorizontalGroup(
            pnSideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSideBarLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnSideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(btnShowSongs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE)
                    .addComponent(btnShowInvalidSongs, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 184, Short.MAX_VALUE))
                .addContainerGap())
        );
        pnSideBarLayout.setVerticalGroup(
            pnSideBarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSideBarLayout.createSequentialGroup()
                .addGap(88, 88, 88)
                .addComponent(btnShowSongs)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnShowInvalidSongs)
                .addContainerGap(437, Short.MAX_VALUE))
        );

        pnTable.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        tableSongs.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Pack", "Artista", "Música"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.Object.class, java.lang.Object.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableSongs.getTableHeader().setResizingAllowed(false);
        tableSongs.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(tableSongs);
        tableSongs.getColumnModel().getColumn(0).setResizable(false);
        tableSongs.getColumnModel().getColumn(1).setResizable(false);
        tableSongs.getColumnModel().getColumn(2).setResizable(false);

        btnEditArtist.setText("Editar Artista");
        btnEditArtist.setPreferredSize(new java.awt.Dimension(200, 29));
        btnEditArtist.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditArtistActionPerformed(evt);
            }
        });

        btnEditName.setText("Editar Nome da Música");
        btnEditName.setPreferredSize(new java.awt.Dimension(200, 29));
        btnEditName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditNameActionPerformed(evt);
            }
        });

        btnSwitchNames.setText("Trocar Artista <> Nome");
        btnSwitchNames.setPreferredSize(new java.awt.Dimension(200, 29));
        btnSwitchNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSwitchNamesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnTableLayout = new javax.swing.GroupLayout(pnTable);
        pnTable.setLayout(pnTableLayout);
        pnTableLayout.setHorizontalGroup(
            pnTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 670, Short.MAX_VALUE)
                    .addGroup(pnTableLayout.createSequentialGroup()
                        .addComponent(btnEditArtist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnEditName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSwitchNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        pnTableLayout.setVerticalGroup(
            pnTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnTableLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnEditArtist, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSwitchNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 420, Short.MAX_VALUE)
                .addContainerGap())
        );

        pnSearch.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar Músicas"));
        pnSearch.setPreferredSize(new java.awt.Dimension(642, 80));

        jLabel1.setText("Pesquisar:");

        txtSearch.setPreferredSize(new java.awt.Dimension(100, 27));
        txtSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtSearchActionPerformed(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtSearchKeyTyped(evt);
            }
        });

        btnSearch.setText("Buscar");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnSearchLayout = new javax.swing.GroupLayout(pnSearch);
        pnSearch.setLayout(pnSearchLayout);
        pnSearchLayout.setHorizontalGroup(
            pnSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnSearchLayout.createSequentialGroup()
                        .addComponent(txtSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 569, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel1))
                .addContainerGap())
        );
        pnSearchLayout.setVerticalGroup(
            pnSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnSearchLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(pnSearchLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnSearch))
                .addContainerGap(15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(pnSideBar, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(pnSearch, javax.swing.GroupLayout.DEFAULT_SIZE, 698, Short.MAX_VALUE)
                    .addComponent(pnTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(pnSideBar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 599, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(pnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(pnTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        searchSongs(txtSearch.getText());
    }//GEN-LAST:event_btnSearchActionPerformed

    private void txtSearchKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyTyped
    }//GEN-LAST:event_txtSearchKeyTyped

    private void txtSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtSearchActionPerformed
        searchSongs(txtSearch.getText());
    }//GEN-LAST:event_txtSearchActionPerformed

    private void btnShowInvalidSongsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowInvalidSongsActionPerformed
        SongRepository repository = Main.getRepository();
        String[][] invalidSongs = repository.findInvalidSongs("");
        modelInvalidSongs.setDataVector(invalidSongs, new String[]{"Nome do arquivo"});
        tableSongs.setAutoCreateRowSorter(true);
        tableSongs.setModel(modelInvalidSongs);
    }//GEN-LAST:event_btnShowInvalidSongsActionPerformed

    private void btnEditArtistActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditArtistActionPerformed
        SongRepository repository = Main.getRepository();
        int[] rowsIds = tableSongs.getSelectedRows();
        TableModel model = tableSongs.getModel();
        List<Song> selectedSongs = new ArrayList<Song>();
        for (int i : rowsIds) {
            Object value = model.getValueAt(tableSongs.convertRowIndexToModel(i), 3);
            if (value != null) {
                int uniqueId = Integer.parseInt(value.toString());
                selectedSongs.add(repository.findSong(uniqueId));
            }
        }
        if (selectedSongs.size() == 1) {
            Song selected = selectedSongs.get(0);
            if (selected.isValid()) {
                String newArtist = JOptionPane.showInputDialog(this, "Digite o nome do artista:", selected.getFormattedArtist());
                if (newArtist != null) {
                    newArtist = newArtist.replace("-", "*");
                    selected.setArtist(newArtist);
                    selected.updateFile();
                    model.setValueAt(selected.getFormattedArtist(), tableSongs.convertRowIndexToModel(rowsIds[0]), 1);
                    model.setValueAt(selected.getUniqueId(), tableSongs.convertRowIndexToModel(rowsIds[0]), 3);
                    JOptionPane.showMessageDialog(this, "Artista alterado!", "Sunfly Song List", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Música inválida, não é possível fazer alterações", "Sunfly Song List", JOptionPane.ERROR_MESSAGE);
            }
        } else if (selectedSongs.size() > 1) {
            String newArtist = JOptionPane.showInputDialog(this, "Digite o nome do artista para todas as músicas selecionadas:");
            if (newArtist != null) {
                newArtist = newArtist.replace("-", "*");
                int invalid = 0;
                for (int i = 0; i < selectedSongs.size(); i++) {
                    Song song = selectedSongs.get(i);
                    if (song.isValid()) {
                        song.setArtist(newArtist);
                        song.updateFile();
                        model.setValueAt(song.getFormattedArtist(), tableSongs.convertRowIndexToModel(rowsIds[i]), 1);
                        model.setValueAt(song.getUniqueId(), tableSongs.convertRowIndexToModel(rowsIds[i]), 3);
                    } else {
                        invalid++;
                    }
                }
                if (invalid == 0) {
                    JOptionPane.showMessageDialog(this, "Artistas alterados!", "Sunfly Song List", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Nem todas as músicas puderam ser alteradas, pois " + invalid + " delas são inválidas!", "Sunfly Song List", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
        tableSongs.requestFocus();
    }//GEN-LAST:event_btnEditArtistActionPerformed

    private void btnShowSongsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShowSongsActionPerformed
        searchSongs("");
    }//GEN-LAST:event_btnShowSongsActionPerformed

    private void btnEditNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditNameActionPerformed
        SongRepository repository = Main.getRepository();
        int[] rowsIds = tableSongs.getSelectedRows();
        TableModel model = tableSongs.getModel();
        List<Song> selectedSongs = new ArrayList<Song>();
        for (int i : rowsIds) {
            Object value = model.getValueAt(tableSongs.convertRowIndexToModel(i), 3);
            if (value != null) {
                int uniqueId = Integer.parseInt(value.toString());
                selectedSongs.add(repository.findSong(uniqueId));
            }
        }
        if (selectedSongs.size() == 1) {
            Song selected = selectedSongs.get(0);
            if (selected.isValid()) {
                String newSongName = JOptionPane.showInputDialog(this, "Digite o nome da música:", selected.getFormattedSongName());
                if (newSongName != null) {
                    newSongName = newSongName.replace("-", "*");
                    selected.setSongName(newSongName);
                    selected.updateFile();
                    model.setValueAt(selected.getFormattedSongName(), tableSongs.convertRowIndexToModel(rowsIds[0]), 2);
                    model.setValueAt(selected.getUniqueId(), tableSongs.convertRowIndexToModel(rowsIds[0]), 3);
                    JOptionPane.showMessageDialog(this, "Nome da música alterada!", "Sunfly Song List", JOptionPane.INFORMATION_MESSAGE);
                }
            } else {
                JOptionPane.showMessageDialog(this, "Música inválida, não é possível fazer alterações", "Sunfly Song List", JOptionPane.ERROR_MESSAGE);
            }
        } else if (selectedSongs.size() > 1) {
            String newSongName = JOptionPane.showInputDialog(this, "Digite o nome da música para todas as músicas selecionadas:");
            if (newSongName != null) {
                newSongName = newSongName.replace("-", "*");
                int invalid = 0;
                for (int i = 0; i < selectedSongs.size(); i++) {
                    Song song = selectedSongs.get(i);
                    if (song.isValid()) {
                        song.setSongName(newSongName);
                        song.updateFile();
                        model.setValueAt(song.getFormattedSongName(), tableSongs.convertRowIndexToModel(rowsIds[i]), 2);
                        model.setValueAt(song.getUniqueId(), tableSongs.convertRowIndexToModel(rowsIds[i]), 3);
                    } else {
                        invalid++;
                    }
                }
                if (invalid == 0) {
                    JOptionPane.showMessageDialog(this, "Nomes alterados!", "Sunfly Song List", JOptionPane.INFORMATION_MESSAGE);
                } else {
                    JOptionPane.showMessageDialog(this, "Nem todas as músicas puderam ser alteradas, pois " + invalid + " delas são inválidas!", "Sunfly Song List", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
        tableSongs.requestFocus();
    }//GEN-LAST:event_btnEditNameActionPerformed

    private void btnSwitchNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSwitchNamesActionPerformed
        SongRepository repository = Main.getRepository();
        int[] rowsIds = tableSongs.getSelectedRows();
        TableModel model = tableSongs.getModel();
        List<Song> selectedSongs = new ArrayList<Song>();
        for (int i : rowsIds) {
            Object value = model.getValueAt(tableSongs.convertRowIndexToModel(i), 3);
            if (value != null) {
                int uniqueId = Integer.parseInt(value.toString());
                selectedSongs.add(repository.findSong(uniqueId));
            }
        }
        if (selectedSongs.size() == 1) {
            Song selected = selectedSongs.get(0);
            if (selected.isValid()) {
                String newSongName = selected.getArtist();
                selected.setArtist(selected.getSongName());
                selected.setSongName(newSongName);
                selected.updateFile();
                model.setValueAt(selected.getFormattedArtist(), tableSongs.convertRowIndexToModel(rowsIds[0]), 1);
                model.setValueAt(selected.getFormattedSongName(), tableSongs.convertRowIndexToModel(rowsIds[0]), 2);
                model.setValueAt(selected.getUniqueId(), tableSongs.convertRowIndexToModel(rowsIds[0]), 3);
            } else {
                JOptionPane.showMessageDialog(this, "Música inválida, não é possível fazer alterações", "Sunfly Song List", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Só é possível trocar nome e artista de uma música por vez", "Sunfly Song List", JOptionPane.ERROR_MESSAGE);
        }
        tableSongs.requestFocus();
    }//GEN-LAST:event_btnSwitchNamesActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEditArtist;
    private javax.swing.JButton btnEditName;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnShowInvalidSongs;
    private javax.swing.JButton btnShowSongs;
    private javax.swing.JButton btnSwitchNames;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel pnSearch;
    private javax.swing.JPanel pnSideBar;
    private javax.swing.JPanel pnTable;
    private javax.swing.JTable tableSongs;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
